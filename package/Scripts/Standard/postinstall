#!/bin/bash


diskloader="boot0"
diskloaderdualboot="boot0md"
partitionloaderhfs="boot1h"
partitionloaderfat="boot1f32"
filesystemloader="boot"

diskmicrocodetype[1]="GRUB,47525542"
diskmicrocodetype[2]="LILO,4c494c4f"

start ()
{
# $1 volume

bootvolume="${@}"
echo "Volume is $bootvolume"
bootresources="${0%/*}"
echo "$bootresources"

if [ -z "${bootvolume}" ]; then
	echo
	echo "Cannot find the volume. Exiting."
	echo
	exit
fi

bootdev=$( df "${bootvolume}" | sed -n '2p' | awk '{print $1}' )
bootrdev=${bootdev/disk/rdisk}

if [ "${bootdev}" = "${bootdev#*disk*s}" ]; then
	echo
	echo "ERROR Volume does not use slices."
	echo
	exit				
fi

bootdisk=${bootdev%s*}
bootrdisk=${bootdisk/disk/rdisk}
bootslice=${bootdev#*disk*s}

echo "==============================================="
echo "Installer Variables:"
echo "********************"
echo "bootvolume: Volume is ${bootvolume}"
echo "bootdev: Volume device is ${bootdev}"
echo "bootrdev: Volume raw device is ${bootrdev}"
echo "bootslice: Volume slice is ${bootslice}"
echo "bootdisk: Disk device is ${bootdisk}"
echo "bootrdisk: Disk raw device is ${bootrdisk}"
echo "diskloader: Disk loader is ${diskloader}"
echo "partitionloaderhfs: Partition loader is ${partitionloaderhfs}"
echo "partitionloaderfat: Partition loader is ${partitionloaderfat}"
echo "filesystemloader: Filesystem loader is ${filesystemloader}"
echo "bootresources: Boot Resources is ${bootresources}"
echo "-----------------------------------------------"
echo ""
echo ""
}

checkdiskmicrocodetype ()
{
echo "==============================================="
echo "Diskmicrocodetype:"
echo "******************"

diskmicrocode=$( dd 2>/dev/null if=${bootdisk} count=1 | dd 2>/dev/null count=1 bs=437 | perl -ne '@a=split"";for(@a){printf"%02x",ord}' )
diskmicrocodetypecounter=0
while [ ${diskmicrocodetypecounter} -lt ${#diskmicrocodetype[@]} ]; do
        diskmicrocodetypecounter=$(( ${diskmicrocodetypecounter} + 1 ))
        diskmicrocodetypeid=${diskmicrocodetype[${diskmicrocodetypecounter}]#*,}
        if [ ! "${diskmicrocode}" = "${diskmicrocode/${diskmicrocodetypeid}/}" ]; then
                echo "${diskmicrocodetype[${diskmicrocodetypecounter}]%,*} found."
	else
		echo "Didn't find a match for ${diskmicrocodetype[${diskmicrocodetypecounter}]%,*}"
        fi
done
echo "-----------------------------------------------"
echo ""
echo ""
}



checkdiskmicrocode ()
{
echo "==============================================="
echo "Diskmicrocode:"
echo "*************"

# Note: The checks for Boot0 and Boot0hfs assume the code doesn't change!!

# 1 action ( check or set )

diskmicrocode=$( dd 2>/dev/null if=${bootdisk} count=1 | dd 2>/dev/null count=1 bs=437 | perl -ne '@a=split"";for(@a){printf"%02x",ord}' )
diskmicrocodemd5=$( dd 2>/dev/null if=${bootdisk} count=1 | dd 2>/dev/null count=1 bs=437 | md5 )

#echo "${diskmicrocode}"

if [ $( echo "${diskmicrocode}" | awk -F0 '{print NF-1}' ) = 874 ]; then
	echo "Diskmicrocode = 874 (Which means the first 437 bytes of the MBR Disk Sector is blank)"
	if [ "${1}" = "set" ]; then
		echo "No disk microcode found. Updating."
		diskupdate=true
		echo "diskupdate is now set to true."
	else
		echo "No disk microcode found."
	fi
else
	# There is already something on the MBR 
	if [ ${1} = set ]; then

		# See if a Windows bootloader already exists
		windowsloader=$( dd 2>/dev/null if=${bootdisk} count=4 bs=1 | xxd | awk '{print $2$3}' )
		if [ "${windowsloader}" == "33c08ed0" ]  ; then
			echo "Found existing Windows Boot Loader"
			echo "Will replace loader with Boot0hfs"
			diskupdate=true
			echo "diskupdate is now set to true."
		fi

		# See if a Chameleon stage0 boot file already exists
		stage0type=$( dd 2>/dev/null if=${bootdisk} count=3 bs=1 skip=105 | xxd | awk '{print $2$3}' )
		if [ "${stage0type}" == "0b807c" ] || [ "${stage0type}" == "0a803c" ] ; then

			echo "Found existing Chameleon Stage 0 Loader"
			# if found Boot0HFS without a Windows installation set diskupdate to true
			if [ "${stage0type}" == "0b807c" ] && [ "${disksignature}" == "00000000" ]; then
				echo "Found existing Chameleon Boot0HFS without a Windows installation"
				echo "Will replace loader with Boot0"
				diskupdate=true
				echo "diskupdate is now set to true."
			fi

			# if found Boot0 with a Windows installation set diskupdate to true
			if [ "${stage0type}" == "0a803c" ] && [ "${disksignature}" != "00000000" ]; then
				echo "Found existing Chameleon Boot0 with a Windows installation"
				echo "Will replace loader with Boot0hfs"
				diskupdate=true
				echo "diskupdate is now set to true."
			fi
		fi

		# If neither a Windows or Chameleon Boot Loader exists
		if [ "${stage0type}" != "0b807c" ] && [ "${stage0type}" != "0a803c" ] && [ "${windowsloader}" != "33c08ed0" ]  ; then
			test=$(echo "${diskmicrocode}" | awk -F0 '{print NF-1}' )
			echo "Disk microcode found: ${test} - Preserving."
			echo "diskupdate is left at false"
		fi
	else
		test=$(echo "${diskmicrocode}" | awk -F0 '{print NF-1}' )
		echo "Disk microcode found: ${test}"
	fi
	echo "Disk microcode MD5 is ${diskmicrocodemd5}"
fi
echo "-----------------------------------------------"
echo ""
echo ""
}


checkdisksignature ()
{
echo "==============================================="
echo "Find Disk Signature:"
echo "*************"

disksignature=$( dd 2>/dev/null if=${bootdisk} count=1 | dd 2>/dev/null count=4 bs=1 skip=440 | perl -ne '@a=split"";for(@a){printf"%02x",ord}' )

echo "${disksignature}"

if [ $disksignature = "00000000" ]; then
	echo "Just Zero's found meaning Windows isn't installed."
else
	echo "Non Zero means we've found a Windows installation"
fi
echo "-----------------------------------------------"
echo ""
echo ""
}



checkpartitionbootcode ()
{
echo "==============================================="
echo "Find Partition Bootcode:"
echo "************************"

# 1 action ( check or set )

partitionbootcode=$( dd if=${bootrdev} count=1 2>/dev/null | perl -ne '@a=split"";for(@a){printf"%02x",ord}' )
partitionbootcodeextended=$( dd if=${bootrdev} count=1 skip=1 2>/dev/null | perl -ne '@a=split"";for(@a){printf"%02x",ord}' )

echo "${partitionbootcode}"

if [ $( echo "${partitionbootcode}" | awk -F0 '{print NF-1}' ) = 1024 ]; then
	echo "partitionbootcode = 1024 (Which means the whole 512 bytes of the MBR Disk Sector is blank)"
	if [ "${1}" = "set" ]; then
		echo "No partition bootcode found. Updating."
	else
		echo "No partition bootcode found."
	fi
else
	if [ "${1}" = "set" ]; then
		echo "Partition bootcode found. Overwriting."
	else
		echo "Partition bootcode found."
	fi
	if [ $( echo "${partitionbootcodeextended}" | awk -F0 '{print NF-1}' ) = 1024 ]; then
		partitionbootcodemd5=$( dd 2>/dev/null if=${bootrdev} count=1 | md5 )
	else
		partitionbootcodemd5=$( dd 2>/dev/null if=${bootrdev} count=2 | md5 )
		echo "Partition bootcode is dual sector."
	fi
	echo "Partition bootcode MD5 is ${partitionbootcodemd5}"
fi

echo "-----------------------------------------------"
echo ""
echo ""
}


start ${3}


echo "==============================================="
echo "Check the format of the selected partition"
echo "*************************************"

if [ "$( fstyp ${bootdev} | grep hfs )" ]; then
	echo "${bootdev} is a currently formatted as HFS"
	efiformat="hfs"
fi
if [ "$( fstyp ${bootdev} | grep msdos )" ]; then
	echo "${bootdev} is currently formatted as msdos"
	efiformat="msdos"
fi 
echo "-----------------------------------------------"
echo ""
echo ""


echo "==============================================="
echo "Determine Partition Scheme:"
echo "***************************"

partitiontable=$( dd 2>/dev/null if=${bootdisk} count=1 skip=1 | dd 2>/dev/null count=8 bs=1 | perl -ne '@a=split"";for(@a){printf"%02x",ord}' )
if [ "${partitiontable:0:16}" == "4546492050415254" ]; then	
	partitiontable=$( dd 2>/dev/null if=${bootdisk} count=1 | dd 2>/dev/null count=64 bs=1 skip=446 | perl -ne '@a=split"";for(@a){printf"%02x",ord}' )
	if [ "${partitiontable:8:2}" == "ee" ]; then
		echo "Found System ID 'EE' to identify GPT Partition"
		if [ "${partitiontable:40:2}" == "00" ] && [ "${partitiontable:72:2}" == "00" ] && [ "${partitiontable:104:2}" == "00" ]; then
			echo "Found System ID '00' for each remaining possible partition"
			partitiontable="GPT"
	 	else
			partitiontable="GPT/MBR"
		fi
	fi
else
	partitiontable="MBR"
fi

echo "${partitiontable} found."
echo "-----------------------------------------------"
echo ""
echo ""


diskupdate=false


checkdisksignature
checkdiskmicrocodetype
checkdiskmicrocode set
checkpartitionbootcode set



echo "==============================================="
echo "Can we install the Chameleon bootloader files?"
echo "**********************************************"

if ${diskupdate}; then
	echo "Diskupdate = true, so yes"
	#---------------------------------------------------------------------
	# Check bytes 438-446 of the GPTdiskProtectiveMBR for a Windows Disk Signature
	# If there’s no Windows disk signature then we can write boot0
	#---------------------------------------------------------------------

	if [ ${disksignature} == "00000000" ]; then
		echo "Executing command: fdisk440 -u -f /usr/standalone/i386/${diskloader} -y ${bootdisk}"
		fdisk440 -u -f "${bootvolume}/usr/standalone/i386/${diskloader}" -y ${bootdisk}
	else
		#---------------------------------------------------------------------
		# If it exists then Windows is also installed on the HDD and we need to write boot0hfs
		#---------------------------------------------------------------------
		echo "Executing command: fdisk440 -u -f /usr/standalone/i386/${diskloaderdualboot} -y ${bootdisk}"
		fdisk440 -u -f "${bootvolume}/usr/standalone/i386/${diskloaderdualboot}" -y ${bootdisk}
	fi
else
echo "Diskupdate is false, so no stage 0 file was written"
fi

if [ ${efiformat} = "hfs" ]; then
	echo "Executing command: dd if=/usr/standalone/i386/${partitionloaderhfs} of=${bootrdev}"
	dd if="${bootvolume}/usr/standalone/i386/${partitionloaderhfs}" of=${bootrdev}
fi

if [ ${efiformat} = "msdos" ]; then
	echo "Executing command: dd if=/usr/standalone/i386/${partitionloaderfat} of=${bootrdev}"
	dd if="${bootvolume}/usr/standalone/i386/${partitionloaderfat}" of=${bootrdev}
fi

echo "Executing command: cp /usr/standalone/i386/${filesystemloader} ${bootvolume}"
cp "${bootvolume}/usr/standalone/i386/${filesystemloader}" "${bootvolume}"

echo "Executing command: ${bootresources}/Tools/SetFile -a V ${bootvolume}/${filesystemloader}"
"${bootresources}/Tools/SetFile" -a V "${bootvolume}/${filesystemloader}"

echo "-----------------------------------------------"
echo ""
echo ""


echo "==============================================="
echo "Set Active Partition ONLY if Windows is not installed"
echo "*****************************************************"

if [ ${disksignature} == "00000000" ]; then
	# echo "Windows is not installed so let's change the active partition"

	partitionactive=$( fdisk440 -d ${bootrdisk} | grep -n "*" | awk -F: '{print $1}')
	echo "Current Active Partition: ${partitionactive}"

	if [ "${partitionactive}" = "${bootslice}" ]; then
		echo "${bootvolume} is already flagged as active"
	else
		echo "${bootvolume} is not flagged as active, so let's do it."
		# BadAxe requires EFI partition to be flagged active.
		# but it doesn't' hurt to do it for any non-windows partition.
		
		fdisk440 -e ${bootrdisk} <<-MAKEACTIVE
		print
		flag ${bootslice}
		write
		y
		quit
		MAKEACTIVE
	fi
else
	echo "Windows is installed so we let that remain the active partition"
fi
echo "-----------------------------------------------"
echo ""
echo ""

# hide boot file
chflags hidden "${3}/boot"
echo "boot file hidden ${3}/boot"

exit
